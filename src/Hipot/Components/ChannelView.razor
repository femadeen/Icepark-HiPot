@using System.Diagnostics
@using System.Timers
@using Hipot.Core.Services
@using Hipot.Data.Core.Models
@using Hipot.Components.Shared

<div class="channel-card">
    <div class="channel-header">
        <h2 class="channel-title">@ChannelState.Idm: @ChannelState.CurrentStatus</h2>
        <span class="elapsed-time">@ElapsedTime</span>
    </div>
    <div class="channel-content">
        <div class="form-group">
            <input type="text" 
                   class="form-input" 
                   @bind="ChannelState.SerialNumber" 
                   @onkeydown="HandleSNKeyDown"
                   placeholder=" " />
            <label class="form-label">Serial Number</label>
        </div>
        
        <div class="button-group">
            <button class="btn-primary" @onclick="StartTest">Start</button>
            <button class="btn-error" @onclick="AbortTest">Abort</button>
        </div>
        
        <div class="progress-container">
            <div class="progress-header">
                <span>Progress</span>
                <span>@ChannelState.SequencePointer%</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: @ChannelState.SequencePointer%"></div>
            </div>
        </div>
        
        <div class="log-container">
            <div class="log-section">
                <h3>Main Log</h3>
                <div class="log-content">
                    <pre>@ChannelState.MainLog</pre>
                </div>
            </div>
            
            <div class="log-section">
                <h3>Detail Log</h3>
                <div class="log-content">
                    <pre>@ChannelState.DetailLog</pre>
                </div>
            </div>
        </div>
    </div>
</div>

@if (ShowInputPanel)
{
    <InputPanel Title="@InputPanelTitle"
                InputItems="@InputItems"
                OnOkClicked="HandleInputPanelOk"
                OnAbortClicked="HandleInputPanelAbort" />
}

@if (ShowMessageBox)
{
    <MessageBoxPanel Title="@MessageBoxTitle"
                     Message="@MessageBoxMessage"
                     ImageUrl="@MessageBoxImageUrl"
                     Buttons="@MessageBoxButtons"
                     OnOkClicked="HandleMessageBoxOk"
                     OnYesClicked="HandleMessageBoxYes"
                     OnNoClicked="HandleMessageBoxNo" />
}

@if (ShowPassFailPanel)
{
    <PassFailPanel IsPassed="@IsPassed"
                   OnOkClicked="HandlePassFailPanelOk" />
}


<style>
    .channel-card {
        background: #ffffff;
        border-radius: 24px;
        box-shadow: 0 32px 64px rgba(220, 38, 38, 0.15), 0 0 0 1px rgba(220, 38, 38, 0.1);
        padding: 2rem;
        position: relative;
        border: 2px solid rgba(220, 38, 38, 0.1);
        margin: 1rem;
    }

    .channel-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(220, 38, 38, 0.1);
    }

    .channel-title {
        font-size: 1.5rem;
        font-weight: 700;
        background: linear-gradient(135deg, #dc2626, #b91c1c);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin: 0;
        letter-spacing: -0.02em;
    }

    .elapsed-time {
        font-size: 1rem;
        font-weight: 500;
        color: #64748b;
    }

    .form-group {
        margin-bottom: 1.5rem;
        position: relative;
    }

    .form-input {
        width: 100%;
        padding: 1rem 1.25rem;
        border: 2px solid #e2e8f0;
        border-radius: 16px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #ffffff;
        outline: none;
        font-family: inherit;
    }

    .form-input:focus {
        border-color: #dc2626;
        box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
        transform: translateY(-1px);
    }

    .form-label {
        position: absolute;
        left: 1.25rem;
        top: 1rem;
        color: #64748b;
        font-size: 1rem;
        pointer-events: none;
        transition: all 0.3s ease;
        background: white;
        padding: 0 0.5rem;
    }

    .form-input:focus + .form-label,
    .form-input:not(:placeholder-shown) + .form-label {
        top: -0.5rem;
        left: 0.75rem;
        font-size: 0.875rem;
        color: #dc2626;
        font-weight: 500;
    }

    .button-group {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .btn-primary, .btn-error {
        flex: 1;
        padding: 1rem;
        border: none;
        border-radius: 16px;
        color: white;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        position: relative;
        overflow: hidden;
    }

    .btn-primary {
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
    }

    .btn-error {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    }

    .btn-primary:hover, .btn-error:hover {
        transform: translateY(-2px);
        box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);
    }

    .btn-primary:active, .btn-error:active {
        transform: translateY(0);
    }

    .btn-primary::before, .btn-error::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
    }

    .btn-primary:hover::before, .btn-error:hover::before {
        left: 100%;
    }

    .progress-container {
        margin-bottom: 2rem;
    }

    .progress-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #64748b;
    }

    .progress-bar {
        height: 12px;
        background-color: #e2e8f0;
        border-radius: 6px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #dc2626, #b91c1c);
        border-radius: 6px;
        transition: width 0.3s ease;
    }

    .log-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
    }

    .log-section {
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        overflow: hidden;
    }

    .log-section h3 {
        margin: 0;
        padding: 1rem;
        background-color: #f8fafc;
        border-bottom: 1px solid #e2e8f0;
        font-size: 1.1rem;
        font-weight: 600;
        color: #64748b;
    }

    .log-content {
        padding: 1rem;
        height: 200px;
        overflow: auto;
        background-color: #ffffff;
    }

    .log-content pre {
        margin: 0;
        white-space: pre-wrap;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
        color: #334155;
    }

    /* Dark mode support */
    @@media (prefers-color-scheme: dark) {
        .channel-card {
            background: rgba(30, 41, 59, 0.95);
            color: #e2e8f0;
            box-shadow: 0 32px 64px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(220, 38, 38, 0.2);
            border: 2px solid rgba(220, 38, 38, 0.2);
        }

        .channel-header {
            border-bottom: 1px solid rgba(220, 38, 38, 0.2);
        }

        .form-input {
            background: rgba(51, 65, 85, 0.8);
            border-color: #475569;
            color: #e2e8f0;
        }

        .form-label {
            background: rgba(30, 41, 59, 0.95);
            color: #94a3b8;
        }

        .form-input:focus + .form-label {
            color: #818cf8;
        }

        .log-section {
            border: 1px solid #475569;
        }

        .log-section h3 {
            background-color: rgba(51, 65, 85, 0.8);
            border-bottom: 1px solid #475569;
            color: #cbd5e1;
        }

        .log-content {
            background-color: rgba(30, 41, 59, 0.95);
        }

        .log-content pre {
            color: #e2e8f0;
        }

        .progress-bar {
            background-color: #334155;
        }
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .log-container {
            grid-template-columns: 1fr;
        }
        
        .button-group {
            flex-direction: column;
        }
    }
</style>

@code {
    [Parameter]
    public TestChannelState ChannelState { get; set; }

    [Inject]
    private SequenceService SequenceService { get; set; }

    private bool ShowInputPanel { get; set; }
    private string InputPanelTitle { get; set; }
    private List<InputItem> InputItems { get; set; } = new();

    private bool ShowMessageBox { get; set; }
    private string MessageBoxTitle { get; set; }
    private string MessageBoxMessage { get; set; }
    private string MessageBoxImageUrl { get; set; }
    private MessageBoxButtons MessageBoxButtons { get; set; }

    private bool ShowPassFailPanel { get; set; }
    private bool IsPassed { get; set; }

    private System.Timers.Timer _timer;
    private Stopwatch _stopwatch = new Stopwatch();
    private string ElapsedTime = "00:00:00";

    protected override void OnInitialized()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += OnTimerTick;
        _timer.AutoReset = true;
    }

    private async Task StartTest()
    {
        _stopwatch.Start();
        _timer.Start();
        await SequenceService.ExecuteTestSequenceAsync(ChannelState.Idm);
        _stopwatch.Stop();
        _timer.Stop();
    }

    private void AbortTest()
    {
        ChannelState.ShouldStop = true;
        _stopwatch.Stop();
        _timer.Stop();
    }

    private void OnTimerTick(object sender, ElapsedEventArgs e)
    {
        ElapsedTime = _stopwatch.Elapsed.ToString(@"hh\:mm\:ss");
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleSNKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await StartTest();
        }
    }

    private void HandleInputPanelOk()
    {
        ShowInputPanel = false;
        // Logic to handle the input from the user
    }

    private void HandleInputPanelAbort()
    {
        ShowInputPanel = false;
        // Logic to handle the abort action
    }

    private void HandleMessageBoxOk()
    {
        ShowMessageBox = false;
        // Logic to handle the OK action
    }

    private void HandleMessageBoxYes()
    {
        ShowMessageBox = false;
        // Logic to handle the Yes action
    }

    private void HandleMessageBoxNo()
    {
        ShowMessageBox = false;
        // Logic to handle the No action
    }

    private void HandlePassFailPanelOk()
    {
        ShowPassFailPanel = false;
        // Logic to handle the OK action
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
