@page "/"
@@using Hipot.Core.Services
@using Hipot.Data
@using Pekasuz3.Maui.Data
@using Pekasuz3.Maui.Services
inject AppState AppState
@inject NavigationManager NavigationManager
@inject XmlService XmlService
@inject DataService DataService
@inject SequenceService SequenceService

<PageTitle>Icepark-HiPot</PageTitle>

<div class="page-container">
    <div class="header">
        <h1 class="page-title">Icepark-HiPot Testing System</h1>
        <div class="user-info">
            <span>Welcome, @AppState.CurrentUser?.UserName</span>
        </div>
    </div>

    @if (_isInitialized)
    {
        @if (_channelStates.Count > 0)
        {
            <div class="tabs-container">
                <div class="tab-buttons">
                    @for (int i = 0; i < _channelStates.Count; i++)
                    {
                        var index = i;
                        <button class="tab-button @(index == _activeTabIndex ? "active" : "")" 
                                @onclick="() => _activeTabIndex = index">
                            Channel @_channelStates[index].Idm
                        </button>
                    }
                </div>
                <div class="tab-content">
                    <ChannelView ChannelState="@_channelStates[_activeTabIndex]" />
                </div>
            </div>
        }
        else
        {
            <div class="empty-state">
                <h3>No channels configured</h3>
                <p>Please check your configuration files.</p>
            </div>
        }
    }
    else
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading channels...</p>
        </div>
    }
</div>

<style>
    .page-container {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(220, 38, 38, 0.1);
    }

    .page-title {
        font-size: 2rem;
        font-weight: 700;
        background: linear-gradient(135deg, #dc2626, #b91c1c);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin: 0;
        letter-spacing: -0.02em;
    }

    .user-info {
        background: rgba(220, 38, 38, 0.1);
        padding: 0.5rem 1rem;
        border-radius: 16px;
        font-weight: 500;
        color: #64748b;
    }

    .tabs-container {
        background: #ffffff;
        border-radius: 24px;
        box-shadow: 0 32px 64px rgba(220, 38, 38, 0.15), 0 0 0 1px rgba(220, 38, 38, 0.1);
        border: 2px solid rgba(220, 38, 38, 0.1);
        overflow: hidden;
    }

    .tab-buttons {
        display: flex;
        border-bottom: 1px solid rgba(220, 38, 38, 0.1);
        background: rgba(248, 250, 252, 0.8);
    }

    .tab-button {
        flex: 1;
        padding: 1rem 2rem;
        border: none;
        background: transparent;
        font-size: 1.1rem;
        font-weight: 600;
        color: #64748b;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }

    .tab-button:hover {
        background: rgba(220, 38, 38, 0.05);
        color: #dc2626;
    }

    .tab-button.active {
        color: #dc2626;
    }

    .tab-button.active::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #dc2626, #b91c1c);
    }

    .tab-content {
        padding: 1rem;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 4rem;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(220, 38, 38, 0.1);
        border-top: 4px solid #dc2626;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .empty-state {
        text-align: center;
        padding: 4rem;
        color: #64748b;
    }

    .empty-state h3 {
        margin-bottom: 1rem;
        font-size: 1.5rem;
    }

    /* Dark mode support */
    @@media (prefers-color-scheme: dark) {
        .tabs-container {
            background: rgba(30, 41, 59, 0.95);
            box-shadow: 0 32px 64px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(220, 38, 38, 0.2);
            border: 2px solid rgba(220, 38, 38, 0.2);
        }

        .tab-buttons {
            background: rgba(51, 65, 85, 0.8);
            border-bottom: 1px solid rgba(220, 38, 38, 0.2);
        }

        .tab-button {
            color: #94a3b8;
        }

        .tab-button:hover {
            background: rgba(220, 38, 38, 0.1);
            color: #f87171;
        }

        .tab-button.active {
            color: #f87171;
        }

        .user-info {
            background: rgba(220, 38, 38, 0.2);
            color: #cbd5e1;
        }
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .page-container {
            padding: 1rem;
        }

        .header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }

        .page-title {
            font-size: 1.5rem;
        }

        .tab-buttons {
            flex-wrap: wrap;
        }

        .tab-button {
            flex: 1 0 50%;
            padding: 0.75rem 1rem;
            font-size: 0.9rem;
        }
    }
</style>

@code {
    private List<TestChannelState> _channelStates = new();
    private bool _isInitialized = false;
    private int _activeTabIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        if (AppState.CurrentUser == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        // This path should be configurable
        //string path = @"C:\Users\HP\source\repos\Pekasuz3\Pekasuz3.Maui\Resources\tscript"; // <-- fixed
        //XmlService.ScriptPath = Path.GetFullPath(path);
        // XmlService.ScriptPath = "/mnt/c/Users/HP/source/repos/Pekasuz3/Pekasuz3/bin/Debug/tscript";

        var channelConfigs = XmlService.GetChannelConfigurations();

        int idm = 0;
        foreach (var config in channelConfigs)
        {
            var state = new TestChannelState
            {
                Idm = idm,
                // Initialize other properties from config if needed
            };
            _channelStates.Add(state);

            DataService.CreateTempDataTable(idm);
            DataService.CreateMainScanTable(idm);
            SequenceService.InitializeChannel(idm, ""); // SN will be set from UI

            idm++;
        }

        _isInitialized = true;
        await InvokeAsync(StateHasChanged);
    }
}