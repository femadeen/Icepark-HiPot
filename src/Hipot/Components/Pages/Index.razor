@page "/"
@using Hipot.Core.DTOs
@using Hipot.Core.Services
@using Hipot.Data
@using Hipot.Core.Services.Interfaces
@using Hipot.Data.Core.Services
@using Hipot.Data.Core.Models
@inject AppState AppState
@inject NavigationManager NavigationManager
@inject IChannelConfigService ChannelConfigService
@inject DataService DataService
@inject SequenceService SequenceService
@inject XmlConfigService XmlConfigService
@inject SerialPortService SerialPortService

<PageTitle>Icepark-HiPot</PageTitle>

<div class="page-container">
    <div class="header">
        <h1 class="page-title">Icepark-HiPot Testing System</h1>
        <div class="user-info">
            <span>Welcome, @AppState.CurrentUser?.UserName</span>
        </div>
    </div>

    @if (AppState.ErrorMessages.Any())
    {
        <div class="error-container">
            <h4>Configuration Errors:</h4>
            <ul>
                @foreach (var error in AppState.ErrorMessages)
                {
                    <li>@error</li>
                }
            </ul>
        </div>
    }

    @if (_isInitialized)
    {
        @if (_channelStates.Count > 0)
        {
            <div class="tabs-container">
                <div class="tab-buttons">
                    @for (int i = 0; i < _channelStates.Count; i++)
                    {
                        var index = i;
                        <button class="tab-button @(index == _activeTabIndex ? "active" : "") @GetTabClass(_channelStates[index])" 
                        @onclick="() => _activeTabIndex = index">
                            Channel @_channelStates[index].Idm
                        </button>
                    }
                </div>
                <div class="tab-content">
                    <ChannelView ChannelState="@_channelStates[_activeTabIndex]" />
                </div>
            </div>
        }
        else
        {
            <div class="empty-state">
                <h3>No channels configured</h3>
                <p>Please check your configuration files.</p>
            </div>
        }
    }
    else
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading channels...</p>
        </div>
    }
</div>

<style>
    /* ... existing styles ... */
</style>

@code {
    private List<TestChannelState> _channelStates = new();
    private bool _isInitialized = false;
    private int _activeTabIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        if (AppState.CurrentUser == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var channelCount = XmlConfigService.GetChannelCount();
        var portConfigs = XmlConfigService.GetSerialPortConfigs();

        foreach (var config in portConfigs)
        {
            try
            {
                SerialPortService.AddPort(config.Name, config.PortName, config.BaudRate, config.Parity, config.DataBits, config.StopBits);
                SerialPortService.OpenPort(config.Name);
            }
            catch (Exception ex)
            {
                AppState.ErrorMessages.Add($"Failed to open port {config.PortName}: {ex.Message}");
            }
        }

        var channelConfigs = await ChannelConfigService.GetChannelConfigurationsAsync();

        int idm = 0;
        foreach (var config in channelConfigs)
        {
            var state = new TestChannelState
            {
                Idm = idm,
                // Initialize other properties from config if needed
            };
            _channelStates.Add(state);

            DataService.CreateTempDataTable(idm);
            SequenceService.InitializeChannel(idm, ""); // SN will be set from UI

            idm++;
        }

        _isInitialized = true;
        await InvokeAsync(StateHasChanged);
    }

    private string GetTabClass(TestChannelState channelState)
    {
        return channelState.CurrentStatus switch
        {
            "TESTING" => "tab-testing",
            "PASS" => "tab-pass",
            "FAIL" => "tab-fail",
            "INFO" => "tab-info",
            _ => ""
        };
    }
}